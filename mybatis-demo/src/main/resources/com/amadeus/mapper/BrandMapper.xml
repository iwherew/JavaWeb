<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace:名称空间
-->
<mapper namespace="com.amadeus.mapper.BrandMapper">

<!--  数据表字段名称 和 实体类的属性名称 不一样，则不能自动封装  -->
<!--    <select id="selectAll" resultType="brand">-->
<!--        select * from tb_brand;-->
<!--    </select>-->

<!--    起别名， as 可省略 -->
<!--    缺点：每次查询都要定义一次别名 -->
<!--    解决方式：使用sql片段（局限性：不灵活）-->
<!--    解决：使用resultMap-->

<!--
    id: 唯一标识
    type: 映射类型，支持别名
-->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id: 完成主键字段映射
            result: 完成一般字段映射
                column: 表的列名
                property: 实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
    </select>

    <!--
        sql 片段
    -->
<!--    <sql id="brand_column">-->
<!--        id,-->
<!--        brand_name as brandName,-->
<!--        company_name companyName,-->
<!--        ordered,-->
<!--        description,-->
<!--        status-->
<!--    </sql>-->
<!--    <select id="selectAll" resultType="brand">-->
<!--        select-->
<!--        <include refid="brand_column"/>-->
<!--        from tb_brand;-->
<!--    </select>-->


    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>

<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--        select * from tb_brand-->
<!--        where-->
<!--            status = #{status}-->
<!--            and company_name like #{companyName}-->
<!--            and brand_name like #{brandName}-->
<!--    </select>-->

<!--
    动态条件查询（动态SQL）
        * if: 条件判断
            * test: 逻辑表达式
        * <where> 替换 where , 解决where 和 逻辑运算符（and、or） 连接问题
-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <choose> <!-- 相当于switch  -->
                <when test="status != null"> <!-- 相当于case  -->
                    and status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    and status = #{status}
                </when>
                <when test="status != null">
                    and status = #{status}
                </when>
                <!-- 有where标签,自动加otherwise  -->
<!--                <otherwise> &lt;!&ndash; 相当于default  &ndash;&gt;-->
<!--                    and 1 = 1-->
<!--                </otherwise>-->
            </choose>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>

<!--    全量修改-->
    <update id="fullUpdate">
        update tb_brand
        set
            brand_name = #{brandName},
            company_name = #{companyName},
            ordered = #{ordered},
            description = #{description},
            status = #{status}
        where id = #{id};
    </update>

<!--    动态修改 使用set if-->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null ">
                status = #{status},
            </if>
        </set>
            where id = #{id}
    </update>

    <!-- 删除单条数据 -->
    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>

    <!-- 批量删除 -->
<!--
    mybatis会将数组参数，封装成一个Map集合。
        * 默认： array = 数组
        * 使用@Params注解改变map集合的默认key的名称
        * separator: item的分隔符
        * open: 前添加
        * close: 后添加
-->
    <delete id="deleteByIds">
        delete from tb_brand where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>;
    </delete>

<!--
      mybatis 参数封装：
        *单个参数：
            1、POJO类型：直接使用，属性名 和 参数占位符名称 一致
            2、Map集合：直接使用，键名 和 参数占位符名称 一致
            3、Collection：封装为Map集合
                map.put("arg0",collection集合)
                map.put("collection",collection集合)
            4、List：封装为Map集合
                map.put("arg0",list集合)
                map.put("collection",list集合)
                map.put("list",list集合)
            5、Array：封装为Map集合
                map.put("arg0",数组)
                map.put("array",数组)
            6、其他类型：直接使用
        *多个参数
            map.put("arg0",参数值1)
            map.put("param1",参数值1)
            map.put("arg1",参数值2)
            map.put("param2",参数值2)
            ____________@Param("username")
            map.put("username",参数值1)
            map.put("param1",参数值1)
            map.put("arg1",参数值2)
            map.put("param2",参数值2)
-->
</mapper>